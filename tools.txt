if (${TARGET_ARCH} STREQUAL "^arm*")
    set(crt_defines NACL_BUILD_ARCH=arm)
    message(FATAL_ERROR "Arch $TARGET_ARCH} is unsupportted now!")
endif ()

add_custom_command(
    OUTPUT ${NACL_TARBALL_DIR}/toolchain_${NACL_HOST_OS}_x86.tar.bz2
           ${NACL_TARBALL_DIR}/naclsdk_${NACL_HOST_OS}_x86.tgz
           ${NACL_TARBALL_DIR}/naclsdk_linux_arm-trusted.tgz
           ${NACL_TARBALL_DIR}/naclsdk_pnacl_translator.tgz
           ${NACL_TARBALL_DIR}/naclsdk_pnacl_${NACL_HOST_OS}_x86.tgz
    COMMAND ${PYTHON_EXECUTABLE} ${CHROME_DEPS_DIR}/build/download_nacl_toolchains.py --keep
)

# untar and prep newlib
add_custom_command(
    OUTPUT ${NACL_NEWLIB_DIR}/stamp.untar
    COMMAND ${PYTHON_EXECUTABLE} ${NATIVE_CLIENT_DIR}/build/untar_toolchain.py --tool x86_newlib --tmp ${SHARED_INTERMEDIATE_DIR}/untar --sdk ${SHARED_INTERMEDIATE_DIR}/sdk --os ${NACL_HOST_OS} ${NACL_TARBALL_DIR}/naclsdk_${NACL_HOST_OS}_x86.tgz
    DEPENDS ${NACL_TARBALL_DIR}/naclsdk_${NACL_HOST_OS}_x86.tgz
    COMMENT "Untarring ${NACL_TARBALL_DIR}/naclsdk_${NACL_HOST_OS}_x86.tgz"
)
add_custom_command(
    OUTPUT ${NACL_NEWLIB_DIR}/stamp.prep
    COMMAND ${PYTHON_EXECUTABLE} ${NATIVE_CLIENT_DIR}/build/prep_nacl_sdk.py --tool x86_newlib --path ${NACL_NEWLIB_DIR}
    DEPENDS ${NACL_NEWLIB_DIR}/stamp.untar
    COMMENT "Preparing x86_newlib SDK"
)

# untar and prep glibc
add_custom_command(
    OUTPUT ${NACL_GLIBC_DIR}/stamp.untar
    COMMAND ${PYTHON_EXECUTABLE} ${NATIVE_CLIENT_DIR}/build/untar_toolchain.py --tool x86_glibc --tmp ${SHARED_INTERMEDIATE_DIR}/untar --sdk ${SHARED_INTERMEDIATE_DIR}/sdk --os ${NACL_HOST_OS} ${NACL_TARBALL_DIR}/toolchain_${NACL_HOST_OS}_x86.tar.bz2
    DEPENDS ${NACL_TARBALL_DIR}/toolchain_${NACL_HOST_OS}_x86.tar.bz2
    COMMENT "Untarring ${NACL_TARBALL_DIR}/toolchain_${NACL_HOST_OS}_x86.tar.bz2"
)

add_custom_command(
    OUTPUT ${NACL_GLIBC_DIR}/stamp.prep
    COMMAND ${PYTHON_EXECUTABLE} ${NATIVE_CLIENT_DIR}/build/prep_nacl_sdk.py --tool x86_glibc  --path ${NACL_GLIBC_DIR}
    DEPENDS ${NACL_GLIBC_DIR}/stamp.untar
    COMMENT "Preparing x86_glibc SDK"
)

# untar and prep pnacl
add_custom_command(
    OUTPUT ${NACL_PNACL_DIR}/stamp.untar
    COMMAND ${PYTHON_EXECUTABLE} ${NATIVE_CLIENT_DIR}/build/untar_toolchain.py --tool x86_pnacl --tmp ${SHARED_INTERMEDIATE_DIR}/untar --sdk ${SHARED_INTERMEDIATE_DIR}/sdk --os ${NACL_HOST_OS} ${NACL_TARBALL_DIR}/naclsdk_pnacl_${NACL_HOST_OS}_x86.tgz
    DEPENDS ${NACL_TARBALL_DIR}/naclsdk_pnacl_${NACL_HOST_OS}_x86.tgz
    COMMENT "Untarring ${NACL_TARBALL_DIR}/naclsdk_pnacl_${NACL_HOST_OS}_x86.tgz"
)
add_custom_command(
    OUTPUT ${NACL_PNACL_DIR}/stamp.prep
    COMMAND ${PYTHON_EXECUTABLE} ${NATIVE_CLIENT_DIR}/build/prep_nacl_sdk.py --tool x86_pnacl  --path ${NACL_PNACL_DIR}
    DEPENDS ${NACL_PNACL_DIR}/stamp.untar
    COMMENT "Preparing pnacl SDK"
)

set(prep_nacl_sdk_deps
    ${NACL_NEWLIB_DIR}/stamp.prep
    ${NACL_GLIBC_DIR}/stamp.prep
    ${NACL_PNACL_DIR}/stamp.prep
)

add_custom_target(prep_nacl_sdk
    DEPENDS ${prep_nacl_sdk_deps}
)

include(NaclBuildNexe)

set(crt_defines NACL_BUILD_ARCH=x86)

# CRT 64 
set(extra_args --compile --no-suffix --strip=_x86_64)
nacl_build_crt_nlib(crt_init_64 "${extra_args}" 64 "${crt_defines}" crti.o ${NATIVE_CLIENT_DIR}/src/untrusted/stubs/crti_x86_64.S)
add_custom_target(crt_init_64
    DEPENDS ${NACL_TC_NEWLIB64_DIR}/crti.o
)

nacl_build_crt_nlib(crt_fini_64 "${extra_args}" 64 "${crt_defines}" crtn.o ${NATIVE_CLIENT_DIR}/src/untrusted/stubs/crtn_x86_64.S)
add_custom_target(crt_fini_64
    DEPENDS ${NACL_TC_NEWLIB64_DIR}/crtn.o
)

# CRT 32
set(extra_args --compile --no-suffix --strip=_x86_32)
nacl_build_crt_nlib(crt_init_32 "${extra_args}" 32 "${crt_defines}" crti.o ${NATIVE_CLIENT_DIR}/src/untrusted/stubs/crti_x86_32.S)
add_custom_target(crt_init_32
    DEPENDS ${NACL_TC_NEWLIB32_DIR}/crti.o
)

nacl_build_crt_nlib(crt_fini_32 "${extra_args}" 32 "${crt_defines}" crtn.o ${NATIVE_CLIENT_DIR}/src/untrusted/stubs/crtn_x86_32.S)
add_custom_target(crt_fini_32
    DEPENDS ${NACL_TC_NEWLIB32_DIR}/crtn.o
)

add_custom_target(prep_toolchain
    DEPENDS prep_nacl_sdk crt_init_32 crt_fini_32 crt_init_64 crt_fini_64
)
