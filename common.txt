include(TargetArch)
target_architecture(TARGET_ARCH)

add_definitions(-DNACL_LINUX=1 -DNACL_ANDROID=0 -DNACL_OSX=0 -DNACL_WINDOWS=0 -D_GNU_SOURCE=1)
set(CPP_PRECOMPILE_FLAGS
    -DNACL_LINUX=1
    -DNACL_ANDROID=0
    -DNACL_OSX=0
    -DNACL_WINDOWS=0
    -D_GNU_SOURCE=1
)

if (${TARGET_ARCH} STREQUAL "x86_64")
    add_definitions(-DNACL_TARGET_SUBARCH=64 -DNACL_TARGET_ARCH=x86 -DNACL_BUILD_SUBARCH=64 -DNACL_BUILD_ARCH=x86)
    list(APPEND CPP_PRECOMPILE_FLAGS
        -DNACL_TARGET_SUBARCH=64
        -DNACL_TARGET_ARCH=x86
        -DNACL_BUILD_SUBARCH=64
        -DNACL_BUILD_ARCH=x86
    )
    set(NACL_RESERVE_TOP 0x0)
    set(LINKER_EMULATION elf_x86_64) 
elseif (${TARGET_ARCH} STREQUAL "i386")
    add_definitions(-DNACL_TARGET_SUBARCH=32 -DNACL_TARGET_ARCH=x86 -DNACL_BUILD_SUBARCH=32 -DNACL_BUILD_ARCH=x86)
    list(APPEND CPP_PRECOMPILE_FLAGS
        -DNACL_TARGET_SUBARCH=32
        -DNACL_TARGET_ARCH=x86
        -DNACL_BUILD_SUBARCH=32
        -DNACL_BUILD_ARCH=x86
    )
    set(NACL_RESERVE_TOP 0x40000000)
    set(LINKER_EMULATION elf_i386) 
elseif (${TARGET_ARCH} MATCHES "^arm*")
    add_definitions(-DNACL_TARGET_SUBARCH=32 -DNACL_TARGET_ARCH=arm -DNACL_BUILD_SUBARCH=32 -DNACL_BUILD_ARCH=arm)
    list(APPEND CPP_PRECOMPILE_FLAGS
        -DNACL_TARGET_SUBARCH=32
        -DNACL_TARGET_ARCH=arm
        -DNACL_BUILD_SUBARCH=32
        -DNACL_BUILD_ARCH=arm
    )
    set(NACL_RESERVE_TOP 0x40002000)
    set(LINKER_EMULATION armelf_linux_eabi)
else ()
  message(FATAL_ERROR "Unsupported arch $TARGET_ARCH}")
endif ()
