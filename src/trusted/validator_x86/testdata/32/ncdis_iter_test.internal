00000000: 00 00                                        add %ds[%al], %al
  { 0x00,
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_b),
    InstAdd,
    2, {
      { E_Operand, OpFlag(RexExcludesAhBhChDh) | OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(RexExcludesAhBhChDh) | OpFlag(OpUse) },
  } };
ExprNodeVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, 0 },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
00000000: 00 c0                                        add %al, %al
  { 0x00,
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_b),
    InstAdd,
    2, {
      { E_Operand, OpFlag(RexExcludesAhBhChDh) | OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(RexExcludesAhBhChDh) | OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
00000000: 01 c0                                        add %eax, %eax
  { 0x01,
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstAdd,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
00000000: 03 18                                        add %ebx, %ds[%eax]
  { 0x03,
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstAdd,
    2, {
      { G_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ebx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
00000000: 03 1d 20 00 00 00                            add %ebx, 0x20
  { 0x03,
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstAdd,
    2, {
      { G_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ebx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x20, ExprUsed | ExprSize32 | ExprSignedHex },
};
00000000: 02 04 00                                     add %al, %ds[%eax+%eax*1]
  { 0x02,
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_b),
    InstAdd,
    2, {
      { G_Operand, OpFlag(RexExcludesAhBhChDh) | OpFlag(OpUse) | OpFlag(OpSet) },
      { E_Operand, OpFlag(RexExcludesAhBhChDh) | OpFlag(OpUse) },
  } };
ExprNodeVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
