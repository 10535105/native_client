0000000000000000: 00 c0                                        add %al, %al
  { 1, { 0x00, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_b),
    InstAdd,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
0000000000000000: 01 c0                                        add %eax, %eax
  { 1, { 0x01, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstAdd,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OperandZeroExtends_v) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 41 01 c3                                     add %r11d, %eax
  { 1, { 0x01, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstAdd,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OperandZeroExtends_v) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r11d, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 44 01 d8                                     add %eax, %r11d
  { 1, { 0x01, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstAdd,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OperandZeroExtends_v) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r11d, ExprUsed | ExprSize32 },
};
0000000000000000: 48 01 c3                                     add %rbx, %rax
  { 1, { 0x01, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstAdd,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rbx, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
0000000000000000: 67 03 18                                     add %ebx, [%eax]
  { 1, { 0x03, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstAdd,
    2, {
      { G_Operand, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OperandZeroExtends_v) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ebx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 02 04 00                                     add %al, [%rax+%rax*1]
  { 1, { 0x02, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_b),
    InstAdd,
    2, {
      { G_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 67 02 04 00                                  add %al, [%eax+%eax*1]
  { 1, { 0x02, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_b),
    InstAdd,
    2, {
      { G_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 48 83 ec 08                                  sub %rsp, 0x8
  { 1, { 0x83, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeInModRm) | InstFlag(OpcodeHasImmed_b) | InstFlag(OpcodeLockable) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstSub,
    3, {
      { Opcode5, OpFlag(OperandExtendsOpcode) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
00000000004003d4: e8 83 00 00 00                               call 0x40045c
  { 1, { 0xe8, 0x00, 0x00 },
    NACLi_JMPZ,
    InstFlag(OpcodeHasImmed) | InstFlag(OperandSize_v),
    InstCall,
    3, {
      { RegREIP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegRESP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { J_Operand, OpFlag(OpUse) | OpFlag(OperandNear) | OpFlag(OperandRelative) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x40045c, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
00000000004003de: e8 7d 05 00 00                               call 0x400960
  { 1, { 0xe8, 0x00, 0x00 },
    NACLi_JMPZ,
    InstFlag(OpcodeHasImmed) | InstFlag(OperandSize_v),
    InstCall,
    3, {
      { RegREIP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegRESP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { J_Operand, OpFlag(OpUse) | OpFlag(OperandNear) | OpFlag(OperandRelative) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x400960, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: c3                                           ret
  { 1, { 0xc3, 0x00, 0x00 },
    NACLi_RETURN,
    0,
    InstRet,
    2, {
      { RegREIP, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegRESP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: ff 35 ea 0d 20 00                            push [%rip+0x200dea]
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeInModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o) | InstFlag(OperandSizeDefaultIs64),
    InstPush,
    3, {
      { Opcode6, OpFlag(OperandExtendsOpcode) },
      { RegRSP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { E_Operand, OpFlag(OpSet) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x200dea, ExprSize32 | ExprSignedHex },
};
0000000000000000: ff 25 ec 0d 20 00                            jmp [%rip+0x200dec]
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_INDIRECT,
    InstFlag(OpcodeInModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o) | InstFlag(OperandSizeForce64),
    InstJmp,
    3, {
      { Opcode4, OpFlag(OperandExtendsOpcode) },
      { RegRIP, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OperandNear) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprJumpTarget },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x200dec, ExprSize32 | ExprSignedHex },
};
0000000000000000: 0f 1f 40 00                                  nop
  { 2, { 0x0f, 0x1f, 0x00 },
    NACLi_386,
    InstFlag(OpcodeInModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstNop,
    1, {
      { Opcode0, OpFlag(OperandExtendsOpcode) },
  } };
ExprNodeVector[0] = {
};
0000000000000000: 68 00 00 00 00                               push 0x0
  { 1, { 0x68, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeHasImmed_v) | InstFlag(OperandSize_o) | InstFlag(OperandSizeDefaultIs64),
    InstPush,
    2, {
      { RegRESP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize32 | ExprUnsignedHex },
};
0000000000400403: e9 e0 ff ff ff                               jmp 0x4003e8
  { 1, { 0xe9, 0x00, 0x00 },
    NACLi_JMPZ,
    InstFlag(OpcodeHasImmed) | InstFlag(OperandSize_v),
    InstJmp,
    2, {
      { RegREIP, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { J_Operand, OpFlag(OpUse) | OpFlag(OperandNear) | OpFlag(OperandRelative) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x4003e8, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: 49 89 d1                                     mov %r9, %rdx
  { 1, { 0x89, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstMov,
    2, {
      { E_Operand, OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r9, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rdx, ExprUsed | ExprSize64 },
};
0000000000000000: 5e                                           pop %rsi
  { 1, { 0x5e, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodePlusR) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o) | InstFlag(OperandSizeDefaultIs64),
    InstPop,
    3, {
      { OpcodeBaseMinus6, OpFlag(OperandExtendsOpcode) },
      { RegRSP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { G_OpcodeBase, OpFlag(OpSet) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %rsi, ExprSet | ExprSize64 },
};
0000000000000000: 49 c7 c0 c0 08 40 00                         mov %r8, 0x4008c0
  { 1, { 0xc7, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeInModRm) | InstFlag(OpcodeHasImmed_v) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstMov,
    3, {
      { Opcode0, OpFlag(OperandExtendsOpcode) },
      { E_Operand, OpFlag(OpSet) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r8, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x4008c0, ExprUsed | ExprSize32 | ExprUnsignedHex },
};
0000000000000000: f4                                           hlt
  { 1, { 0xf4, 0x00, 0x00 },
    NACLi_386,
    0,
    InstHlt,
    0, {
  } };
ExprNodeVector[0] = {
};
0000000000000000: 48 8b 05 61 0d 20 00                         mov %rax, [%rip+0x200d61]
  { 1, { 0x8b, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstMov,
    2, {
      { G_Operand, OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x200d61, ExprSize32 | ExprSignedHex },
};
0000000000000000: 48 85 c0                                     test %rax, %rax
  { 1, { 0x85, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstTest,
    2, {
      { E_Operand, OpFlag(OpUse) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
000000000040046a: 74 02                                        jz 0x40046e
  { 1, { 0x74, 0x00, 0x00 },
    NACLi_JMP8,
    InstFlag(OpcodeHasImmed) | InstFlag(OperandSize_b),
    InstJz,
    2, {
      { RegREIP, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { J_Operand, OpFlag(OpUse) | OpFlag(OperandNear) | OpFlag(OperandRelative) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x40046e, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: ff d0                                        call %rax
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_INDIRECT,
    InstFlag(OpcodeInModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o) | InstFlag(OperandSizeForce64),
    InstCall,
    4, {
      { Opcode2, OpFlag(OperandExtendsOpcode) },
      { RegRIP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegRSP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OperandNear) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 | ExprJumpTarget },
};
000000000040048d: eb 24                                        jmp 0x4004b3
  { 1, { 0xeb, 0x00, 0x00 },
    NACLi_JMP8,
    InstFlag(OpcodeHasImmed) | InstFlag(OperandSize_b),
    InstJmp,
    2, {
      { RegREIP, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { J_Operand, OpFlag(OpUse) | OpFlag(OperandNear) | OpFlag(OperandRelative) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x4004b3, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: c9                                           leave
  { 1, { 0xc9, 0x00, 0x00 },
    NACLi_386,
    0,
    InstLeave,
    2, {
      { RegREBP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegRESP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rbp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: 66 66 2e 0f 1f 84 00 00 00 00 00             nop
  { 2, { 0x0f, 0x1f, 0x00 },
    NACLi_386,
    InstFlag(OpcodeInModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstNop,
    1, {
      { Opcode0, OpFlag(OperandExtendsOpcode) },
  } };
ExprNodeVector[0] = {
};
0000000000000000: b8 00 00 00 00                               mov %eax, 0x0
  { 1, { 0xb8, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeHasImmed) | InstFlag(OpcodePlusR) | InstFlag(OperandSize_v),
    InstMov,
    3, {
      { OpcodeBaseMinus0, OpFlag(OperandExtendsOpcode) },
      { G_OpcodeBase, OpFlag(OpSet) | OpFlag(OperandZeroExtends_v) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize32 | ExprUnsignedHex },
};
0000000000000000: bf 20 10 60 00                               mov %edi, 0x601020
  { 1, { 0xbf, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeHasImmed) | InstFlag(OpcodePlusR) | InstFlag(OperandSize_v),
    InstMov,
    3, {
      { OpcodeBaseMinus7, OpFlag(OperandExtendsOpcode) },
      { G_OpcodeBase, OpFlag(OpSet) | OpFlag(OperandZeroExtends_v) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %edi, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x601020, ExprUsed | ExprSize32 | ExprUnsignedHex },
};
0000000000000000: 48 8b 04 c5 a0 13 60 00                      mov %rax, [%rax*8+0x6013a0]
  { 1, { 0x8b, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstMov,
    2, {
      { G_Operand, OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 8, ExprSize8 },
  { ExprConstant[0] , 0x6013a0, ExprSize32 | ExprUnsignedHex },
};
0000000000000000: 89 7d fc                                     mov [%rbp-0x4], %edi
  { 1, { 0x89, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstMov,
    2, {
      { E_Operand, OpFlag(OpSet) | OpFlag(OperandZeroExtends_v) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x4, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %edi, ExprUsed | ExprSize32 },
};
0000000000000000: 3b 45 fc                                     cmp %eax, [%rbp-0x4]
  { 1, { 0x3b, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstCmp,
    2, {
      { G_Operand, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OperandZeroExtends_v) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: 83 7d f8 08                                  cmp [%rbp-0x8], 0x8
  { 1, { 0x83, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeInModRm) | InstFlag(OpcodeHasImmed_b) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_v),
    InstCmp,
    3, {
      { Opcode7, OpFlag(OperandExtendsOpcode) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OperandZeroExtends_v) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x8, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 8b 45 fc                                     mov %eax, [%rbp-0x4]
  { 1, { 0x8b, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstMov,
    2, {
      { G_Operand, OpFlag(OpSet) | OpFlag(OperandZeroExtends_v) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: 41 d3 e4                                     shl %r12d, %cl
  { 1, { 0xd3, 0x00, 0x00 },
    NACLi_OPINMRM,
    InstFlag(OpcodeInModRm) | InstFlag(OperandSize_v),
    InstShl,
    3, {
      { Opcode4, OpFlag(OperandExtendsOpcode) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { RegCL, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r12d, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %cl, ExprUsed | ExprSize8 },
};
0000000000000000: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00    nop
  { 2, { 0x0f, 0x1f, 0x00 },
    NACLi_386,
    InstFlag(OpcodeInModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstNop,
    1, {
      { Opcode0, OpFlag(OperandExtendsOpcode) },
  } };
ExprNodeVector[0] = {
};
0000000000000000: 48 c1 fd 03                                  sar %rbp, 0x3
  { 1, { 0xc1, 0x00, 0x00 },
    NACLi_OPINMRM,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeInModRm) | InstFlag(OpcodeHasImmed_b) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstSar,
    3, {
      { Opcode7, OpFlag(OperandExtendsOpcode) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { I_Operand, 0 },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rbp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x3, ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 48 8d 2d 0f 07 20 00                         lea %rbp, [%rip+0x20070f]
  { 1, { 0x8d, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstLea,
    2, {
      { G_Operand, OpFlag(OpSet) },
      { M_Operand, OpFlag(OpAddress) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rbp, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprAddress },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x20070f, ExprSize32 | ExprSignedHex },
};
0000000000000000: a0 88 77 66 55 44 33 22 11                   mov %al, [0x1122334455667788]
  { 1, { 0xa0, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeHasImmed_Addr) | InstFlag(OperandSize_b),
    InstMov,
    2, {
      { RegAL, OpFlag(OpSet) },
      { O_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
};
0000000000000000: 66 a1 88 77 66 55 44 33 22 11                mov %ax, [0x1122334455667788]
  { 1, { 0xa1, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeHasImmed_Addr) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstMov,
    2, {
      { RegREAX, OpFlag(OpSet) | OpFlag(OperandZeroExtends_v) },
      { O_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
};
0000000000000000: a2 88 77 66 55 44 33 22 11                   mov [0x1122334455667788], %al
  { 1, { 0xa2, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeHasImmed_Addr) | InstFlag(OperandSize_b),
    InstMov,
    2, {
      { O_Operand, OpFlag(OpSet) },
      { RegAL, OpFlag(OpUse) },
  } };
ExprNodeVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
0000000000000000: 66 a3 88 77 66 55 44 33 22 11                mov [0x1122334455667788], %ax
  { 1, { 0xa3, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeHasImmed_Addr) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstMov,
    2, {
      { O_Operand, OpFlag(OpSet) | OpFlag(OperandZeroExtends_v) },
      { RegREAX, OpFlag(OpUse) },
  } };
ExprNodeVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
};
0000000000000000: 48 b8 88 77 66 55 44 33 22 11                mov %rax, 0x1122334455667788
  { 1, { 0xb8, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeHasImmed) | InstFlag(OpcodePlusR) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstMov,
    3, {
      { OpcodeBaseMinus0, OpFlag(OperandExtendsOpcode) },
      { G_OpcodeBase, OpFlag(OpSet) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant64[2] , 0x1122334455667788, ExprUsed | ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
};
0000000000000000: 44 8a 04 00                                  mov %r8b, [%rax+%rax*1]
  { 1, { 0x8a, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(OperandSize_b),
    InstMov,
    2, {
      { G_Operand, OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r8b, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 8a 44 05 00                                  mov %al, [%rbp+%rax*1]
  { 1, { 0x8a, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(OperandSize_b),
    InstMov,
    2, {
      { G_Operand, OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize8 | ExprSignedHex },
};
0000000000000000: 42 8a 04 20                                  mov %al, [%rax+%r12*1]
  { 1, { 0x8a, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(OperandSize_b),
    InstMov,
    2, {
      { G_Operand, OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %r12, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 41 8a 44 05 00                               mov %al, [%r13+%rax*1]
  { 1, { 0x8a, 0x00, 0x00 },
    NACLi_386,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(OperandSize_b),
    InstMov,
    2, {
      { G_Operand, OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %r13, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize8 | ExprSignedHex },
};
0000000000000000: 0f 38 08 2c 25 00 00 00 00                   psignb %mmx5, [0x0]
  { 3, { 0x0f, 0x38, 0x08 },
    NACLi_SSSE3,
    InstFlag(OpcodeUsesModRm),
    InstPsignb,
    2, {
      { Mmx_G_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { Mmx_E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx5, ExprSet | ExprUsed },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprUnsignedHex },
};
0000000000000000: 66 0f 38 08 2c 25 00 00 00 00                psignb %xmm5, [0x0]
  { 3, { 0x0f, 0x38, 0x08 },
    NACLi_SSSE3,
    InstFlag(OpcodeUsesModRm),
    InstPsignb,
    2, {
      { Xmm_G_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { Xmm_E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm5, ExprSet | ExprUsed },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprUnsignedHex },
};
0000000000000000: 66 44 0f 38 08 2c 00                         psignb %xmm13, [%rax+%rax*1]
  { 3, { 0x0f, 0x38, 0x08 },
    NACLi_SSSE3,
    InstFlag(OpcodeUsesModRm),
    InstPsignb,
    2, {
      { Xmm_G_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { Xmm_E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm13, ExprSet | ExprUsed },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: dd 24 00                                     frstor [%rax+%rax*1]
  { 1, { 0xdd, 0x00, 0x00 },
    NACLi_X87,
    InstFlag(OpcodeInModRm),
    InstFrstor,
    2, {
      { Opcode4, OpFlag(OperandExtendsOpcode) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OpAddress) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprAddress },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 67 dd 24 00                                  frstor [%eax+%eax*1]
  { 1, { 0xdd, 0x00, 0x00 },
    NACLi_X87,
    InstFlag(OpcodeInModRm),
    InstFrstor,
    2, {
      { Opcode4, OpFlag(OperandExtendsOpcode) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OpAddress) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprAddress },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: dc c1                                        fadd %st1, %st0
  { 2, { 0xdc, 0xc1, 0x00 },
    NACLi_X87,
    InstFlag(OpcodePlusR),
    InstFadd,
    3, {
      { OpcodeBaseMinus1, OpFlag(OperandExtendsOpcode) },
      { St_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { RegST0, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st1, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: d8 74 24 10                                  fdiv [%rsp+0x10]
  { 1, { 0xd8, 0x00, 0x00 },
    NACLi_X87,
    InstFlag(OpcodeInModRm),
    InstFdiv,
    3, {
      { Opcode6, OpFlag(OperandExtendsOpcode) },
      { RegST0, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { MemOffset_E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x10, ExprSize8 | ExprSignedHex },
};
0000000000000000: 67 d8 74 24 10                               fdiv [%esp+0x10]
  { 1, { 0xd8, 0x00, 0x00 },
    NACLi_X87,
    InstFlag(OpcodeInModRm),
    InstFdiv,
    3, {
      { Opcode6, OpFlag(OperandExtendsOpcode) },
      { RegST0, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { MemOffset_E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x10, ExprSize8 | ExprSignedHex },
};
0000000000000000: dc 44 00 04                                  fadd [%rax+%rax*1+0x4]
  { 1, { 0xdc, 0x00, 0x00 },
    NACLi_X87,
    InstFlag(OpcodeInModRm),
    InstFadd,
    3, {
      { Opcode0, OpFlag(OperandExtendsOpcode) },
      { RegST0, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { MemOffset_E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: da 04 25 04 00 00 00                         fiadd [0x4]
  { 1, { 0xda, 0x00, 0x00 },
    NACLi_X87,
    InstFlag(OpcodeInModRm),
    InstFiadd,
    3, {
      { Opcode0, OpFlag(OperandExtendsOpcode) },
      { RegST0, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { MemOffset_E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x4, ExprSize32 | ExprUnsignedHex },
};
0000000000000000: da 70 04                                     fidiv [%rax+0x4]
  { 1, { 0xda, 0x00, 0x00 },
    NACLi_X87,
    InstFlag(OpcodeInModRm),
    InstFidiv,
    3, {
      { Opcode6, OpFlag(OperandExtendsOpcode) },
      { RegST0, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { MemOffset_E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: de 50 04                                     ficom [%rax+0x4]
  { 1, { 0xde, 0x00, 0x00 },
    NACLi_X87,
    InstFlag(OpcodeInModRm),
    InstFicom,
    3, {
      { Opcode2, OpFlag(OperandExtendsOpcode) },
      { RegST0, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { MemOffset_E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: dc e5                                        fsubr %st5, %st0
  { 2, { 0xdc, 0xe5, 0x00 },
    NACLi_X87,
    InstFlag(OpcodePlusR),
    InstFsubr,
    3, {
      { OpcodeBaseMinus5, OpFlag(OperandExtendsOpcode) },
      { St_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { RegST0, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st5, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: dc f3                                        fdivr %st3, %st0
  { 2, { 0xdc, 0xf3, 0x00 },
    NACLi_X87,
    InstFlag(OpcodePlusR),
    InstFdivr,
    3, {
      { OpcodeBaseMinus3, OpFlag(OperandExtendsOpcode) },
      { St_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { RegST0, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st3, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: dc ea                                        fsub %st2, %st0
  { 2, { 0xdc, 0xea, 0x00 },
    NACLi_X87,
    InstFlag(OpcodePlusR),
    InstFsub,
    3, {
      { OpcodeBaseMinus2, OpFlag(OperandExtendsOpcode) },
      { St_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { RegST0, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st2, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: dc ce                                        fmul %st6, %st0
  { 2, { 0xdc, 0xce, 0x00 },
    NACLi_X87,
    InstFlag(OpcodePlusR),
    InstFmul,
    3, {
      { OpcodeBaseMinus6, OpFlag(OperandExtendsOpcode) },
      { St_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { RegST0, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st6, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: 48 63 c6                                     movsxd %rax, %esi; *NACL Disallows!*
  { 1, { 0x63, 0x00, 0x00 },
    NACLi_SYSTEM,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstMovsxd,
    2, {
      { G_Operand, OpFlag(OpSet) },
      { Ev_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: 63 c6                                        movsxd %eax, %esi; *NACL Disallows!*
  { 1, { 0x63, 0x00, 0x00 },
    NACLi_ILLEGAL,
    InstFlag(OpcodeUsesModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_v),
    InstMovsxd,
    2, {
      { G_Operand, OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: 6c                                           insb; *NACL Disallows!*
  { 1, { 0x6c, 0x00, 0x00 },
    NACLi_ILLEGAL,
    InstFlag(OperandSize_b),
    InstInsb,
    2, {
      { RegES_EDI, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegDX, OpFlag(OpUse) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 6d                                           insd; *NACL Disallows!*
  { 1, { 0x6d, 0x00, 0x00 },
    NACLi_ILLEGAL,
    InstFlag(OperandSize_v),
    InstInsd,
    2, {
      { RegES_EDI, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegDX, OpFlag(OpUse) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 66 6d                                        insw; *NACL Disallows!*
  { 1, { 0x6d, 0x00, 0x00 },
    NACLi_ILLEGAL,
    InstFlag(OperandSize_w),
    InstInsw,
    2, {
      { RegES_EDI, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegDX, OpFlag(OpUse) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 6e                                           outsb; *NACL Disallows!*
  { 1, { 0x6e, 0x00, 0x00 },
    NACLi_ILLEGAL,
    InstFlag(OperandSize_b),
    InstOutsb,
    2, {
      { RegDX, OpFlag(OpUse) | OpFlag(OpImplicit) },
      { RegES_EDI, OpFlag(OpUse) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 6f                                           outsd; *NACL Disallows!*
  { 1, { 0x6f, 0x00, 0x00 },
    NACLi_ILLEGAL,
    InstFlag(OperandSize_v),
    InstOutsd,
    2, {
      { RegDX, OpFlag(OpUse) | OpFlag(OpImplicit) },
      { RegES_EDI, OpFlag(OpUse) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 6f                                        outsw; *NACL Disallows!*
  { 1, { 0x6f, 0x00, 0x00 },
    NACLi_ILLEGAL,
    InstFlag(OperandSize_w),
    InstOutsw,
    2, {
      { RegDX, OpFlag(OpUse) | OpFlag(OpImplicit) },
      { RegES_EDI, OpFlag(OpUse) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 86 c2                                        xchg %dl, %al
  { 1, { 0x86, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(Opcode64Only) | InstFlag(OperandSize_b),
    InstXchg,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %dl, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: 86 40 20                                     xchg [%rax+0x20], %al
  { 1, { 0x86, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(Opcode64Only) | InstFlag(OperandSize_b),
    InstXchg,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x20, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: 87 40 20                                     xchg [%rax+0x20], %eax
  { 1, { 0x87, 0x00, 0x00 },
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstXchg,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x20, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: a4                                           movsb
  { 1, { 0xa4, 0x00, 0x00 },
    NACLi_386R,
    InstFlag(OperandSize_b),
    InstMovsb,
    2, {
      { RegES_EDI, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegDS_EDI, OpFlag(OpUse) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 a5                                        movsw
  { 1, { 0xa5, 0x00, 0x00 },
    NACLi_386R,
    InstFlag(OperandSize_w),
    InstMovsw,
    2, {
      { RegES_EDI, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegDS_EDI, OpFlag(OpUse) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: a5                                           movsd
  { 1, { 0xa5, 0x00, 0x00 },
    NACLi_386R,
    InstFlag(OperandSize_v),
    InstMovsd,
    2, {
      { RegES_EDI, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegDS_EDI, OpFlag(OpUse) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 48 a5                                        movsq
  { 1, { 0xa5, 0x00, 0x00 },
    NACLi_386R,
    InstFlag(OpcodeUsesRexW) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstMovsq,
    2, {
      { RegES_EDI, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegDS_EDI, OpFlag(OpUse) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
