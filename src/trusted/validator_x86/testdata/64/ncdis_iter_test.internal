0000000000000000: 00 c0                                        add %al, %al
  { 0x00,
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_b),
    InstAdd,
    2, {
      { E_Operand, OpFlag(RexExcludesAhBhChDh) | OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(RexExcludesAhBhChDh) | OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
0000000000000000: 01 c0                                        add %eax, %eax
  { 0x01,
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstAdd,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 41 01 c3                                     add %r11d, %eax
  { 0x01,
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstAdd,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r11d, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 44 01 d8                                     add %eax, %r11d
  { 0x01,
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstAdd,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r11d, ExprUsed | ExprSize32 },
};
0000000000000000: 48 01 c3                                     add %rbx, %rax
  { 0x01,
    NACLi_386L,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstAdd,
    2, {
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rbx, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
0000000000000000: 67 03 18                                     add %ebx, [%eax]
  { 0x03,
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstAdd,
    2, {
      { G_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ebx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 67 02 04 00                                  add %al, [%rax+%rax*1]
  { 0x02,
    NACLi_386L,
    InstFlag(OpcodeUsesModRm) | InstFlag(OpcodeRex) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_b),
    InstAdd,
    2, {
      { G_Operand, OpFlag(RexExcludesAhBhChDh) | OpFlag(OpUse) | OpFlag(OpSet) },
      { E_Operand, OpFlag(RexExcludesAhBhChDh) | OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 48 83 ec 08                                  sub %rsp, 0x8
  { 0x83,
    NACLi_386L,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeInModRm) | InstFlag(OpcodeHasImmed_b) | InstFlag(OpcodeLockable) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstSub,
    3, {
      { Opcode5, OpFlag(OperandExtendsOpcode) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | EpxrUnsignedHex },
};
00000000004003d4: e8 83 00 00 00                               call 0x40045c
  { 0xe8,
    NACLi_JMPZ,
    InstFlag(OpcodeHasImmed) | InstFlag(OperandSize_v),
    InstCall,
    3, {
      { RegREIP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegRESP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { J_Operand, OpFlag(OpUse) | OpFlag(OperandNear) | OpFlag(OperandRelative) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x40045c, ExprUsed | EpxrUnsignedHex },
};
00000000004003de: e8 7d 05 00 00                               call 0x400960
  { 0xe8,
    NACLi_JMPZ,
    InstFlag(OpcodeHasImmed) | InstFlag(OperandSize_v),
    InstCall,
    3, {
      { RegREIP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegRESP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { J_Operand, OpFlag(OpUse) | OpFlag(OperandNear) | OpFlag(OperandRelative) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x400960, ExprUsed | EpxrUnsignedHex },
};
0000000000000000: c3                                           ret
  { 0xc3,
    NACLi_RETURN,
    0,
    InstRet,
    2, {
      { RegREIP, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegRESP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: ff 35 ea 0d 20 00                            push [%rip+0x200dea]
  { 0xff,
    NACLi_386,
    InstFlag(OpcodeInModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o) | InstFlag(OperandSizeDefaultIs64),
    InstPush,
    3, {
      { Opcode6, OpFlag(OperandExtendsOpcode) },
      { RegRSP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { E_Operand, OpFlag(OpSet) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x200dea, ExprSize32 | ExprSignedHex },
};
0000000000000000: ff 25 ec 0d 20 00                            jmp [%rip+0x200dec]
  { 0xff,
    NACLi_INDIRECT,
    InstFlag(OpcodeInModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o) | InstFlag(OperandSizeForce64),
    InstJmp,
    3, {
      { Opcode4, OpFlag(OperandExtendsOpcode) },
      { RegRIP, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OperandNear) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x200dec, ExprSize32 | ExprSignedHex },
};
0000000000000000: 0f 1f 40 00                                  nop
  { 0x1f,
    NACLi_386,
    InstFlag(OpcodeInModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstNop,
    1, {
      { Opcode0, OpFlag(OperandExtendsOpcode) },
  } };
ExprNodeVector[0] = {
};
0000000000000000: 68 00 00 00 00                               push 0x0
  { 0x68,
    NACLi_386,
    InstFlag(OpcodeHasImmed_v) | InstFlag(OperandSize_o) | InstFlag(OperandSizeDefaultIs64),
    InstPush,
    2, {
      { RegRESP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize32 | EpxrUnsignedHex },
};
0000000000400403: e9 e0 ff ff ff                               jmp 0x4003e8
  { 0xe9,
    NACLi_JMPZ,
    InstFlag(OpcodeHasImmed) | InstFlag(OperandSize_v),
    InstJmp,
    2, {
      { RegREIP, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { J_Operand, OpFlag(OpUse) | OpFlag(OperandNear) | OpFlag(OperandRelative) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x4003e8, ExprUsed | EpxrUnsignedHex },
};
0000000000000000: 49 89 d1                                     mov %r9, %rdx
  { 0x89,
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstMov,
    2, {
      { E_Operand, OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r9, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rdx, ExprUsed | ExprSize64 },
};
0000000000000000: 5e                                           pop %rsi
  { 0x5e,
    NACLi_386,
    InstFlag(OpcodePlusR) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o) | InstFlag(OperandSizeDefaultIs64),
    InstPop,
    3, {
      { OpcodeBaseMinus6, OpFlag(OperandExtendsOpcode) },
      { RegRSP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { G_OpcodeBase, OpFlag(OpSet) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %rsi, ExprSet | ExprSize64 },
};
0000000000000000: 49 c7 c0 c0 08 40 00                         mov %r8, 0x4008c0
  { 0xc7,
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeInModRm) | InstFlag(OpcodeHasImmed_v) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstMov,
    3, {
      { Opcode0, OpFlag(OperandExtendsOpcode) },
      { E_Operand, OpFlag(OpSet) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r8, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x4008c0, ExprUsed | ExprSize32 | EpxrUnsignedHex },
};
0000000000000000: f4                                           hlt
  { 0xf4,
    NACLi_386,
    0,
    InstHlt,
    0, {
  } };
ExprNodeVector[0] = {
};
0000000000000000: 48 8b 05 61 0d 20 00                         mov %rax, [%rip+0x200d61]
  { 0x8b,
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstMov,
    2, {
      { G_Operand, OpFlag(OpUse) },
      { E_Operand, OpFlag(OpSet) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x200d61, ExprSize32 | ExprSignedHex },
};
0000000000000000: 48 85 c0                                     test %rax, %rax
  { 0x85,
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstTest,
    2, {
      { E_Operand, OpFlag(OpUse) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
000000000040046a: 74 02                                        jz 0x40046e
  { 0x74,
    NACLi_JMP8,
    InstFlag(OpcodeHasImmed) | InstFlag(OperandSize_b),
    InstJz,
    2, {
      { RegREIP, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { J_Operand, OpFlag(OpUse) | OpFlag(OperandNear) | OpFlag(OperandRelative) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x40046e, ExprUsed | EpxrUnsignedHex },
};
0000000000000000: ff d0                                        call %rax
  { 0xff,
    NACLi_INDIRECT,
    InstFlag(OpcodeInModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o) | InstFlag(OperandSizeForce64),
    InstCall,
    4, {
      { Opcode2, OpFlag(OperandExtendsOpcode) },
      { RegRIP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegRSP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OperandNear) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
000000000040048d: eb 24                                        jmp 0x4004b3
  { 0xeb,
    NACLi_JMP8,
    InstFlag(OpcodeHasImmed) | InstFlag(OperandSize_b),
    InstJmp,
    2, {
      { RegREIP, OpFlag(OpSet) | OpFlag(OpImplicit) },
      { J_Operand, OpFlag(OpUse) | OpFlag(OperandNear) | OpFlag(OperandRelative) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x4004b3, ExprUsed | EpxrUnsignedHex },
};
0000000000000000: c9                                           leave
  { 0xc9,
    NACLi_386,
    0,
    InstLeave,
    2, {
      { RegREBP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
      { RegRESP, OpFlag(OpUse) | OpFlag(OpSet) | OpFlag(OpImplicit) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rbp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: 66 66 2e 0f 1f 84 00 00 00 00 00             nop
  { 0x1f,
    NACLi_386,
    InstFlag(OpcodeInModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstNop,
    1, {
      { Opcode0, OpFlag(OperandExtendsOpcode) },
  } };
ExprNodeVector[0] = {
};
0000000000000000: b8 00 00 00 00                               mov %eax, 0x0
  { 0xb8,
    NACLi_386,
    InstFlag(OpcodeHasImmed) | InstFlag(OpcodePlusR) | InstFlag(OperandSize_v),
    InstMov,
    3, {
      { OpcodeBaseMinus0, OpFlag(OperandExtendsOpcode) },
      { G_OpcodeBase, OpFlag(OpSet) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize32 | EpxrUnsignedHex },
};
0000000000000000: bf 20 10 60 00                               mov %edi, 0x601020
  { 0xbf,
    NACLi_386,
    InstFlag(OpcodeHasImmed) | InstFlag(OpcodePlusR) | InstFlag(OperandSize_v),
    InstMov,
    3, {
      { OpcodeBaseMinus7, OpFlag(OperandExtendsOpcode) },
      { G_OpcodeBase, OpFlag(OpSet) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %edi, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x601020, ExprUsed | ExprSize32 | EpxrUnsignedHex },
};
0000000000000000: 48 8b 04 c5 a0 13 60 00                      mov %rax, [%rax*8+0x6013a0]
  { 0x8b,
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstMov,
    2, {
      { G_Operand, OpFlag(OpUse) },
      { E_Operand, OpFlag(OpSet) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 8, ExprSize8 },
  { ExprConstant[0] , 0x6013a0, ExprSize32 | ExprSignedHex },
};
0000000000000000: 89 7d fc                                     mov [%rbp-0x4], %edi
  { 0x89,
    NACLi_386,
    InstFlag(OpcodeUsesModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstMov,
    2, {
      { E_Operand, OpFlag(OpSet) },
      { G_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x4, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %edi, ExprUsed | ExprSize32 },
};
0000000000000000: 3b 45 fc                                     cmp %eax, [%rbp-0x4]
  { 0x3b,
    NACLi_386,
    InstFlag(OpcodeUsesModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstCmp,
    2, {
      { G_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { E_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: 83 7d f8 08                                  cmp [%rbp-0x8], 0x8
  { 0x83,
    NACLi_386L,
    InstFlag(OpcodeInModRm) | InstFlag(OpcodeHasImmed_b) | InstFlag(OpcodeLockable) | InstFlag(OperandSize_v),
    InstCmp,
    3, {
      { Opcode7, OpFlag(OperandExtendsOpcode) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x8, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | EpxrUnsignedHex },
};
0000000000000000: 8b 45 fc                                     mov %eax, [%rbp-0x4]
  { 0x8b,
    NACLi_386,
    InstFlag(OpcodeUsesModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstMov,
    2, {
      { G_Operand, OpFlag(OpUse) },
      { E_Operand, OpFlag(OpSet) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: 41 d3 e4                                     shl %r12d, %cl
  { 0xd3,
    NACLi_OPINMRM,
    InstFlag(OpcodeInModRm) | InstFlag(OperandSize_v),
    InstShl,
    3, {
      { Opcode4, OpFlag(OperandExtendsOpcode) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { RegCL, OpFlag(OpUse) },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r12d, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %cl, ExprUsed | ExprSize8 },
};
0000000000000000: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00    nop
  { 0x1f,
    NACLi_386,
    InstFlag(OpcodeInModRm) | InstFlag(OperandSize_w) | InstFlag(OperandSize_v),
    InstNop,
    1, {
      { Opcode0, OpFlag(OperandExtendsOpcode) },
  } };
ExprNodeVector[0] = {
};
0000000000000000: 48 c1 fd 03                                  sar %rbp, 0x3
  { 0xc1,
    NACLi_OPINMRM,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeInModRm) | InstFlag(OpcodeHasImmed_b) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstSar,
    3, {
      { Opcode7, OpFlag(OperandExtendsOpcode) },
      { E_Operand, OpFlag(OpUse) | OpFlag(OpSet) },
      { I_Operand, 0 },
  } };
ExprNodeVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rbp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x3, ExprSize8 | EpxrUnsignedHex },
};
0000000000000000: 48 8d 2d 0f 07 20 00                         lea %rbp, [%rip+0x20070f]
  { 0x8d,
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeUsesModRm) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstLea,
    2, {
      { G_Operand, OpFlag(OpSet) },
      { M_Operand, OpFlag(OpAddress) },
  } };
ExprNodeVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rbp, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprAddress },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x20070f, ExprSize32 | ExprSignedHex },
};
0000000000000000: a0 88 77 66 55 44 33 22 11                   mov %al, [0x1122334455667788]
  { 0xa0,
    NACLi_386,
    InstFlag(OpcodeHasImmed_Addr) | InstFlag(OperandSize_b),
    InstMov,
    2, {
      { RegAL, OpFlag(OpSet) },
      { O_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, EpxrUnsignedHex },
  { ExprConstant[0] , 0x55667788, EpxrUnsignedHex },
  { ExprConstant[0] , 0x11223344, EpxrUnsignedHex },
};
0000000000000000: 48 b8 88 77 66 55 44 33 22 11                mov %rax, 0x1122334455667788
  { 0xb8,
    NACLi_386,
    InstFlag(OpcodeUsesRexW) | InstFlag(OpcodeHasImmed) | InstFlag(OpcodePlusR) | InstFlag(Opcode64Only) | InstFlag(OperandSize_o),
    InstMov,
    3, {
      { OpcodeBaseMinus0, OpFlag(OperandExtendsOpcode) },
      { G_OpcodeBase, OpFlag(OpSet) },
      { I_Operand, OpFlag(OpUse) },
  } };
ExprNodeVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant64[2] , 0x1122334455667788, ExprUsed | EpxrUnsignedHex },
  { ExprConstant[0] , 0x55667788, EpxrUnsignedHex },
  { ExprConstant[0] , 0x11223344, EpxrUnsignedHex },
};
